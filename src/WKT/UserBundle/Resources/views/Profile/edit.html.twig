{% extends "@FOSUser/Profile/layout.html.twig" %}

{% block fos_user_content %}
		{% trans_default_domain 'FOSUserBundle' %}
		{{ form_start(form, { 'action': path('fos_user_profile_edit'), 'attr': { 'class': 'fos_user_profile_edit' } }) }}
	    <div class="col-sm-3">
	    	<div class=>
				<div class="form-group">
				  {{ form_label(form.firstname, "Prénom", {'label_attr': {'class': 'text-left col-xs-12 control-label'}}) }}
				  {{ form_errors(form.firstname) }}
				  <div class="col-xs-12">
				    {{ form_widget(form.firstname, {'attr': {'class': 'form-control'}}) }}
				  </div>
				</div>
				<div class="form-group">
				  {{ form_label(form.lastname, "Nom", {'label_attr': {'class': 'text-left col-xs-12 control-label'}}) }}
				  {{ form_errors(form.lastname) }}
				  <div class="col-xs-12">
				    {{ form_widget(form.lastname, {'attr': {'class': 'form-control'}}) }}
				  </div>
				</div>
				<div class="form-group">
				  {{ form_label(form.additionalName, "Nom complémentaire", {'label_attr': {'class': 'text-left col-xs-12 control-label'}}) }}
				  {{ form_errors(form.additionalName) }}
				  <div class="col-xs-12">
				    {{ form_widget(form.additionalName, {'attr': {'class': 'form-control'}}) }}
				  </div>
				</div>
				<div class="form-group">
				  {{ form_label(form.biography, "Votre biographie.", {'label_attr': {'class': 'text-left col-xs-12 control-label'}}) }}
				  {{ form_errors(form.biography) }}
				  <div class="col-xs-12">
				    {{ form_widget(form.biography, {'attr': {'class': 'form-control'}}) }}
				  </div>
				</div>
	    	</div>
		</div>
		<div class="col-sm-9">
			<div class="panel panel-default">
			  <div class="panel-heading">
			    <h3 class="panel-title">Mes informations</h3>
			  </div>
			  <div class="panel-body">
			    <!-- List group -->
			    <ul class="list-group">
			      <li class="list-group-item">{{ form_row(form.email) }}</li>
			      <li class="list-group-item">{{ form_row(form.company) }}</li>
			      <li class="list-group-item">
			      	<div id="locationField">
			      	     <input id="autocomplete" class="form-control" placeholder="Entrez votre ville de résidence"
			      	            onFocus="geolocate()" type="text"></input>
			      	   </div>
			      </li>
			      <li class="list-group-item">
			      	<div class="form-group">
			      	  {{ form_label(form.locality, "Ville de résidence", {'label_attr': {'class': 'control-label'}}) }}
			      	  {{ form_errors(form.locality) }}
			      	  {{ form_widget(form.locality, {'id':'locality', 'attr': {'class': 'form-control'}}) }}
			      	</div>
			      </li>
			      <li class="list-group-item">
			      	<div class="form-group">
			      	  {{ form_label(form.country, "Pays de résidence", {'label_attr': {'class': 'control-label'}}) }}
			      	  {{ form_errors(form.country) }}
			      	  {{ form_widget(form.country, {'id':'country', 'attr': {'class': 'form-control'}}) }}
			      	</div>
			      </li>
			    </ul>
			  </div>
			</div>
			{{ form_end(form) }}
			<div class="panel panel-default">
			  <div class="panel-heading">
			    <h3 class="panel-title">Mes Liens</h3>
			  </div>
			  <div class="panel-body">
			  	<button id="addLink" class="btn btn-default" type="button">Ajouter un lien</button>
			    <form id="linkForm" style="display: none;" action="{{ path('wkt_user_link_add')}}" method="post">
			    	{{ render(controller("WKTUserBundle:Link:add")) }}
			    </form>
			    <ul id="links" class="list-group">
			    {{ render(controller("WKTUserBundle:Link:indexByUser")) }}
			    </ul>
			  </div>
			</div>
			<div>
			    <input class="btn btn-success" type="submit" value="{{ 'profile.edit.submit'|trans }}" />
			</div>

		</div>
{% endblock fos_user_content %}
{% block javascripts %}
	{{ parent() }}
	<script>
	      // This example displays an address form, using the autocomplete feature
	      // of the Google Places API to help users fill in the information.

	      // This example requires the Places library. Include the libraries=places
	      // parameter when you first load the API. For example:
	      // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

	      var placeSearch, autocomplete;
	      var componentForm = {
	        locality: 'long_name',
	        country: 'long_name',
	      };

	      function initAutocomplete() {
	        // Create the autocomplete object, restricting the search to geographical
	        // location types.
	        autocomplete = new google.maps.places.Autocomplete(
	            /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
	            {types: ['geocode']});

	        // When the user selects an address from the dropdown, populate the address
	        // fields in the form.
	        autocomplete.addListener('place_changed', fillInAddress);
	      }

	      function fillInAddress() {
	        // Get the place details from the autocomplete object.
	        var place = autocomplete.getPlace();

	        for (var component in componentForm) {
	          document.getElementById(component).value = '';
	          document.getElementById(component).disabled = false;
	        }

	        // Get each component of the address from the place details
	        // and fill the corresponding field on the form.
	        for (var i = 0; i < place.address_components.length; i++) {
	          var addressType = place.address_components[i].types[0];
	          if (componentForm[addressType]) {
	            var val = place.address_components[i][componentForm[addressType]];
	            document.getElementById(addressType).value = val;
	          }
	        }
	      }

	      // Bias the autocomplete object to the user's geographical location,
	      // as supplied by the browser's 'navigator.geolocation' object.
	      function geolocate() {
	        if (navigator.geolocation) {
	          navigator.geolocation.getCurrentPosition(function(position) {
	            var geolocation = {
	              lat: position.coords.latitude,
	              lng: position.coords.longitude
	            };
	            var circle = new google.maps.Circle({
	              center: geolocation,
	              radius: position.coords.accuracy
	            });
	            autocomplete.setBounds(circle.getBounds());
	          });
	        }
	      }
	    </script>
	<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBLW7IKRu_g2eW6b20cfGegbekSuRg0KCY&libraries=places&callback=initAutocomplete"
	        async defer>
	</script>

	<script type="text/javascript">
		$( document ).ready(function() {
			var addLink = $('#addLink');
			var linkForm = $('#linkForm');

			addLink.click(function(event) {
				linkForm.toggle();
			});

			var trashlink = $('.trash-link');
			trashlink.click(function(event) {
				var url = $(this).attr('data-href');
				var id = $(this).attr('id')
				var targetLi = '#liWithId'+id;
					
				$.ajax({
					url: url,
					method: "post",
					data: { id: $(this).attr('id')},
					success: function(data){
						$(targetLi).remove();
					}
				});

			});


		})

	</script>

{% endblock %}

